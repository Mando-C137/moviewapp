// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  favorites     Movie[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Movie {
  id              String            @id // title of movie in x-y-format
  tmdb_id         Int               @unique
  title           String
  original_title  String
  imdb            ImdbRating        @relation(fields: [imdb_id], references: [id])
  imdb_id         String            @unique
  reviews         Review[]
  overview        String
  release_date    DateTime
  revenue         Float
  backdrop_path   String
  poster_path     String
  runtime         Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  favoredBy       User[]
  CollectionMovie CollectionMovie[]
}

model Review {
  id         String   @id @default(cuid())
  reviewerId String
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  movieId    Int
  movie      Movie    @relation(fields: [movieId], references: [tmdb_id], onDelete: Cascade)
  rating     Float
  content    String?
  title      String
  tagLine    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Collection {
  id          String            @id @default(cuid())
  title       String
  owner       User?             @relation(fields: [ownerId], references: [id], onDelete: Cascade) // kann auch user-lose Collection sein
  ownerId     String
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  movies      CollectionMovie[]

  @@unique([title, ownerId])
}

model CollectionMovie {
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  movie        Movie      @relation(fields: [movieId], references: [tmdb_id], onDelete: Cascade)
  movieId      Int
  rank         Int

  @@unique([collectionId, movieId])
}

model ImdbRating {
  id     String @id
  rating Float
  Movie  Movie?
}
